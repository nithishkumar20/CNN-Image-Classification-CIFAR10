# -*- coding: utf-8 -*-
"""CNN-Image-Classification-CIFAR10

Automatically generated by Colaboratory.

"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# %matplotlib inline

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, MaxPool2D, Flatten
from tensorflow.keras.datasets import cifar10

(X_train, y_train),(X_test,y_test) = cifar10.load_data()

X_train.shape

plt.figure(figsize=(3,3))
plt.imshow(X_train[5])

X_train.max()

"""Normalizing the inut features"""

X_train = X_train/255
X_test = X_test/255

y_test

from tensorflow.keras.utils import to_categorical

y_train_cat = to_categorical(y_train, num_classes = 10)
print(y_train.shape)

y_test_cat = to_categorical(y_test, num_classes = 10)
print(y_test.shape)

"""Creating the cnn model"""

model = Sequential()

#convolution layer
model.add(Conv2D(filters=32, kernel_size=(3,3), strides=(1,1), padding='same', input_shape=(32,32,3), activation='relu'))
#pooling layer
model.add(MaxPool2D(pool_size=(2,2)))

model.add(Conv2D(filters=32, kernel_size=(3,3), strides=(1,1), padding='same', activation='relu'))
model.add(MaxPool2D(pool_size=(2,2)))

model.add(Flatten())

model.add(Dense(256, activation='relu'))

# output layer
model.add(Dense(10, activation='softmax'))

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

model.summary()

"""Adding Early Stopping"""

from tensorflow.keras.callbacks import EarlyStopping

early_stop = EarlyStopping(monitor='val_loss',patience=2,verbose=1)

model.fit(X_train, y_train_cat, epochs=15, validation_data=(X_test,y_test_cat),callbacks=[early_stop])

"""Getting the metrics"""

metrics = pd.DataFrame(model.history.history)

metrics

metrics[['loss','val_loss']].plot()
# we stopped training the model as the validation loss started to increase means the model started to overfit

metrics[['accuracy','val_accuracy']].plot()

from sklearn.metrics import classification_report, confusion_matrix

predictions = model.predict(X_test)
preds = np.argmax(predictions, axis=1)

print(classification_report(y_test,preds))

confusion_matrix(y_test,preds)

"""Prediction"""

image = X_test[69]
plt.imshow(image)

y_test[69]

np.argmax(model.predict(image.reshape(1,32,32,3)))

